//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.6.11;
library Pairing {
    struct G1Point {
        uint X;
        uint Y;
    }
    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint[2] X;
        uint[2] Y;
    }
    /// @return the generator of G1
    function P1() internal pure returns (G1Point memory) {
        return G1Point(1, 2);
    }
    /// @return the generator of G2
    function P2() internal pure returns (G2Point memory) {
        // Original code point
        return G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );

/*
        // Changed by Jordi point
        return G2Point(
            [10857046999023057135944570762232829481370756359578518086990519993285655852781,
             11559732032986387107991004021392285783925812861821192530917403151452391805634],
            [8495653923123431417604973247489272438418190587263600148770280649306958101930,
             4082367875863433681332203403145435568316851327593401208105741076214120093531]
        );
*/
    }
    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
    function negate(G1Point memory p) internal pure returns (G1Point memory r) {
        // The prime q in the base field F_q for G1
        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        if (p.X == 0 && p.Y == 0)
            return G1Point(0, 0);
        return G1Point(p.X, q - (p.Y % q));
    }
    /// @return r the sum of two points of G1
    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
        uint[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-add-failed");
    }
    /// @return r the product of a point on G1 and a scalar, i.e.
    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {
        uint[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }
    /// @return the result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
    /// return true.
    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {
        require(p1.length == p2.length,"pairing-lengths-failed");
        uint elements = p1.length;
        uint inputSize = elements * 6;
        uint[] memory input = new uint[](inputSize);
        for (uint i = 0; i < elements; i++)
        {
            input[i * 6 + 0] = p1[i].X;
            input[i * 6 + 1] = p1[i].Y;
            input[i * 6 + 2] = p2[i].X[0];
            input[i * 6 + 3] = p2[i].X[1];
            input[i * 6 + 4] = p2[i].Y[0];
            input[i * 6 + 5] = p2[i].Y[1];
        }
        uint[1] memory out;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-opcode-failed");
        return out[0] != 0;
    }
    /// Convenience method for a pairing check for two pairs.
    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](2);
        G2Point[] memory p2 = new G2Point[](2);
        p1[0] = a1;
        p1[1] = b1;
        p2[0] = a2;
        p2[1] = b2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for three pairs.
    function pairingProd3(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](3);
        G2Point[] memory p2 = new G2Point[](3);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for four pairs.
    function pairingProd4(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2,
            G1Point memory d1, G2Point memory d2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
}
contract Verifier {
    using Pairing for *;
    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }
    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }
    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [4252822878758300859123897981450591353533073413197771768651442665752259397132,
             6375614351688725206403948262868962793625744043794305715222011528459656738731],
            [21847035105528745403288232691147584728191162732299865338377159692350059136679,
             10505242626370262277552901082094356697409835680220590971873171140371331206856]
        );
        vk.gamma2 = Pairing.G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.delta2 = Pairing.G2Point(
            [16595262399692372968334791536160460065001406184014440860165210472428250447498,
             10104314570484295969846805949619216181935079066843226822569163920653366479598],
            [12077920170163187325613035818532513723653461994062185887790171610951154757861,
             169062343984716486618410527495623008108382425965540826371740685558912891182]
        );
        vk.IC = new Pairing.G1Point[](103);
        
        vk.IC[0] = Pairing.G1Point( 
            21728320705119632049466595006851097844818851635268582039432610571637385817512,
            12813289235259068638581712101809431434061526468202941590653702569175565104181
        );                                      
        
        vk.IC[1] = Pairing.G1Point( 
            11130331341108893561163886422393764639313244621227982661245813095274577045933,
            4595901377452745232607983046884098115267573972377567548127849303325494845940
        );                                      
        
        vk.IC[2] = Pairing.G1Point( 
            14387616582894436286129582588345797618716632542746631216688394064927957803514,
            19821463753720196313216241658612975378872882109597677528606382512512796142264
        );                                      
        
        vk.IC[3] = Pairing.G1Point( 
            17492391969096879351322345971831965482754669794871059257459716923081889458194,
            9332605985099700480215771310861345380718189103973537424416260408181125852650
        );                                      
        
        vk.IC[4] = Pairing.G1Point( 
            6282643688544477083104896903106524433143913453275217718066772623610269967166,
            2176769360644819933967987450676968192502390405368870632839194885439336574962
        );                                      
        
        vk.IC[5] = Pairing.G1Point( 
            12959705611727728178631500422084697291202145674490823770351330316384891115555,
            4318816097253838786873337691496332671955252685398481508946901646472532461725
        );                                      
        
        vk.IC[6] = Pairing.G1Point( 
            5966186726703237066570785185187685188220197126604753226352407764560148123753,
            17930073394817850415726166202056674739916496415021160725742665210276007777000
        );                                      
        
        vk.IC[7] = Pairing.G1Point( 
            19593378141104006080150825632535608546832408933646503616845564617031684424909,
            8880844810327138557766731255175669733655885417117867937077835148501438982886
        );                                      
        
        vk.IC[8] = Pairing.G1Point( 
            8623046720910728572767402567445209142177810036228247679704911029923796308960,
            1059356316962839204618977629829642971975004399768965781829899872764565107960
        );                                      
        
        vk.IC[9] = Pairing.G1Point( 
            7085310776090837199122687224958279460780963637142867303163496576026226804693,
            4564498811340547619119426431980416837397220514017358730680843601294716810073
        );                                      
        
        vk.IC[10] = Pairing.G1Point( 
            576404159271663977143274059213918394719347554827602866847314756936680957010,
            6460042286687573561674071333285410866272253970546148784486455890366919519109
        );                                      
        
        vk.IC[11] = Pairing.G1Point( 
            2522861466057672222290224348879521116055934458698185252073583807778403627206,
            15667170879091042266605032940368495086630461174802242900462274812153999896061
        );                                      
        
        vk.IC[12] = Pairing.G1Point( 
            21440568591983917170847059121517184822453323025548518408811411401409070399518,
            1388301182705672123103927539881248349100466799044083322275016116744922844870
        );                                      
        
        vk.IC[13] = Pairing.G1Point( 
            10429647275030706183996115774716355750233708531806610691749132676552636420043,
            19198529289127986701115334320771016864949287826453155830479602663824117782306
        );                                      
        
        vk.IC[14] = Pairing.G1Point( 
            20621198238607740428025029746936819813273823481012655425745652833082032229593,
            13606785370361347893636820433691335082212896713537179041833210800813782709646
        );                                      
        
        vk.IC[15] = Pairing.G1Point( 
            3362319696484379720186719881501558208671163308142659681488025577944670377289,
            6078883368821858406638864343956379740693900005202743168081502349561668827126
        );                                      
        
        vk.IC[16] = Pairing.G1Point( 
            6827938784480572033159254682603308779747939069240550383091555157975268335408,
            19333717788184177448850503722348410717880741092958782994200800754323260238805
        );                                      
        
        vk.IC[17] = Pairing.G1Point( 
            2250253882352307647041588276908499205644302126662198553975922963817974050889,
            11899582832748905020662404084504258815194843507318884287801428094583367554630
        );                                      
        
        vk.IC[18] = Pairing.G1Point( 
            3266245431738328418809934444989642202118804568160626005145784193466491469427,
            14388112180965758951072851722659842609357616577010416403268154706668715364618
        );                                      
        
        vk.IC[19] = Pairing.G1Point( 
            15058433934148424031660284928044009169575164128771079026049761835074854100659,
            12718078709648179113011606507283725727510291292366902874518413176456448836948
        );                                      
        
        vk.IC[20] = Pairing.G1Point( 
            13681108565756490382250651042928950295783319545779180997491066255269857535196,
            20025187256799937772656226747477121063816011181197754014699311750642286850309
        );                                      
        
        vk.IC[21] = Pairing.G1Point( 
            4094922423846271621298010496220868071897957135498222034705867566774801248840,
            1675378083821195887208640640401746588815252028893492915141498582309491139643
        );                                      
        
        vk.IC[22] = Pairing.G1Point( 
            5195618183324702290586269148651111516036677956125207774952397997376918521765,
            20312468507226652172796301796309283400159266782594558374683065666091713830680
        );                                      
        
        vk.IC[23] = Pairing.G1Point( 
            1862102304867701439157290204052938881745369911326215249428234129518846861061,
            18648942325772336383122070018740154007059283087460144791457129431517623811136
        );                                      
        
        vk.IC[24] = Pairing.G1Point( 
            9087504746201998773933793359143898681751166871930296399519410399076930063369,
            12877452937582040526834568927094874330896996496805580651895319626408652237501
        );                                      
        
        vk.IC[25] = Pairing.G1Point( 
            11326555362367092900357192528431821695565687016493983501367209343620577731380,
            8263614538279224391491758714454396356148194310529994291842371652140554572068
        );                                      
        
        vk.IC[26] = Pairing.G1Point( 
            13724693601146719447084698084676043070457352877510070058110903104144343755485,
            5128500711852438173794917232727699429236975123792510591624400968640021049948
        );                                      
        
        vk.IC[27] = Pairing.G1Point( 
            12373570664304953450435158133190545933013095506783465962744359284073498764168,
            3356704174938144806596983529588270132734020560766557093653439576768875541259
        );                                      
        
        vk.IC[28] = Pairing.G1Point( 
            15195965306592257836430970821257460202220253519978049331328952392670328088765,
            8816456667470987345574584083408785503570121990436137893691129765698736606377
        );                                      
        
        vk.IC[29] = Pairing.G1Point( 
            52563296123363561511680561786753879471020226755934955798698571231822783645,
            13167219387270409505090505038667517444373791814793286396495913618285222864637
        );                                      
        
        vk.IC[30] = Pairing.G1Point( 
            20169227830702468521151377764684486357290734768988928498698018314875249301800,
            5856390309649627866525146072761719549820275747342544055793352651030480540891
        );                                      
        
        vk.IC[31] = Pairing.G1Point( 
            15598291467697571261439205287926245572217719147838630526906650230298804636721,
            21797631338512419646173144286509661527038821086462457963088691943853301480409
        );                                      
        
        vk.IC[32] = Pairing.G1Point( 
            3939089015631780861321888644919943847685559596044061664718483551677569661671,
            13951027470714658235809878188243784113855366014110985542759624588637035435243
        );                                      
        
        vk.IC[33] = Pairing.G1Point( 
            1921997576819105109536101929664323653052255708729507712823125627330963267081,
            17125960494832670894877962942865076912908348295452268779873137527107222341433
        );                                      
        
        vk.IC[34] = Pairing.G1Point( 
            10780702615558802181750953443884542696051167920324261658290821822602120931875,
            13841588563914532315803638753497093828466191200707087836914311175899934262938
        );                                      
        
        vk.IC[35] = Pairing.G1Point( 
            21638266118932273014084208237241716628801971212230713392499122204639698172518,
            9879027541639784751415853542699171695907209535409058729487613359147604900220
        );                                      
        
        vk.IC[36] = Pairing.G1Point( 
            19975484116238217937938671486612315355211206328568081584231370339909936808447,
            13661172055048001177101466851549885245858893674729123640987081919497731461431
        );                                      
        
        vk.IC[37] = Pairing.G1Point( 
            14956814464359560807598417924252736900306469197652774045929458006597870622706,
            9675802132755332599408724559135376412684949368061964027521078045804558238872
        );                                      
        
        vk.IC[38] = Pairing.G1Point( 
            12048869555207949923470582123219967547350815049018483833956111793924692300951,
            11178798460909127626571235009526256209075791375140744823663902154189818802131
        );                                      
        
        vk.IC[39] = Pairing.G1Point( 
            10876955121441565338660714431214417271016445746887514702114857933053839294025,
            13083038792827143224671610288712446251968726081522643486586704340949633950234
        );                                      
        
        vk.IC[40] = Pairing.G1Point( 
            17492162243756253808636819406485362002691325002824416831456764531904243661878,
            14383322877102968850772402749060940112417541409093219543917285811090987916405
        );                                      
        
        vk.IC[41] = Pairing.G1Point( 
            9652876233282825029320689666395160900673860106293350244335566185862356098073,
            12685599263751303050742195566807199522714881837404460757251365492810003955734
        );                                      
        
        vk.IC[42] = Pairing.G1Point( 
            21775704487297414217953586358016545010361916400938434811082029768631450123370,
            12386650640353102821604124111299868638139718043241233269217888742867857533424
        );                                      
        
        vk.IC[43] = Pairing.G1Point( 
            12930588488057840267920640378291306274278342235792058417847180349512808745800,
            10416590814199722037214156761682877675103389696842450759427284653792895052452
        );                                      
        
        vk.IC[44] = Pairing.G1Point( 
            9858320432716410038045800298942781161041679563447272678766909762878074701561,
            21719068834396779834233449528206781112609798305121870087310239654288946044050
        );                                      
        
        vk.IC[45] = Pairing.G1Point( 
            19701295436597047401230689917537133765479577865239074521848940826387186258986,
            14015597140092873233657767549620348429120605438294027599541095896655701945995
        );                                      
        
        vk.IC[46] = Pairing.G1Point( 
            3483058244748572866251667467175644358033750276955737714418580565931972673150,
            8202239306800268512321876946529512105955894443749990488497481631543629710511
        );                                      
        
        vk.IC[47] = Pairing.G1Point( 
            11372644738519544684708564169395038063630432377405848471637696444018906616044,
            10725377218417079781928528878673308694602548243368630433277146535415113870382
        );                                      
        
        vk.IC[48] = Pairing.G1Point( 
            799261547043489716547196088756920609980168376791023808422721700507356440309,
            14923026092882187789418128539339696740027461714063181351982684628431310961869
        );                                      
        
        vk.IC[49] = Pairing.G1Point( 
            3754713837441858211756275377264595257826026286024460699947680928602867790508,
            14538444639226507170259100910508439521148552962283014290743291374190300609940
        );                                      
        
        vk.IC[50] = Pairing.G1Point( 
            7027679504285316876960769014697238214057691307400615246166702306873764843021,
            9597468100756437886152874629600116584186727251355265039970239104987535191017
        );                                      
        
        vk.IC[51] = Pairing.G1Point( 
            18654776529844518895758895781396560562265276194155333348234428511675185724561,
            6685956627317201318964775590712515965920433399875411508416065824499348718984
        );                                      
        
        vk.IC[52] = Pairing.G1Point( 
            17339818256647786738359644434687621004065108511552738149591064829977728165973,
            20733733449180878339171961854377972016185884178407335149819910227035239208246
        );                                      
        
        vk.IC[53] = Pairing.G1Point( 
            12724231495805367207852993282311407068155897935919873907181178432367295198277,
            280186935671394502945174442099449002831670158025697174300370403371766031585
        );                                      
        
        vk.IC[54] = Pairing.G1Point( 
            11716658286667332816174034276470288469850727977546943597299002517760733874568,
            18849807812822167259387030699007653566544644860037109836693537026145818216021
        );                                      
        
        vk.IC[55] = Pairing.G1Point( 
            14928336627454922471130356276205339838289334061464014586227580043029176712171,
            20637513448746363440170544033239624180183345723809635066781316986666168739482
        );                                      
        
        vk.IC[56] = Pairing.G1Point( 
            19722530778680756055382215825142859142198928845349774907252108160549769997758,
            17511380478488631428365759654930391064418993588414228294487970816915910024973
        );                                      
        
        vk.IC[57] = Pairing.G1Point( 
            9432051010169120374942079268856357365025226873329718074508977968930719479603,
            12761584652880624580131083598175911178296124442804539171448608163182545230753
        );                                      
        
        vk.IC[58] = Pairing.G1Point( 
            15066604762138247687898010776641039004356228645327123815652935493509101278543,
            6808399526809787117803104108014446759655848940329240431852375235431515911574
        );                                      
        
        vk.IC[59] = Pairing.G1Point( 
            4642763804744311149587990474269298220282344173021623505040461826410496414842,
            9061202606978277610790879946783523289814514237608827993739678964205220846846
        );                                      
        
        vk.IC[60] = Pairing.G1Point( 
            17388034480545967805323584349695276839366911332973106376110624693372791033310,
            2538932831252345492548607254989112587420750458786192231626647529770559309216
        );                                      
        
        vk.IC[61] = Pairing.G1Point( 
            10214683669372726427784051437164569826137725809563034410364499576546841071861,
            7737083562662920043427170212392160532955547412810466603155842212478441892214
        );                                      
        
        vk.IC[62] = Pairing.G1Point( 
            3253487756768506987101112065535058300116590600249008169587233516967141775732,
            5394314269769368448425043551304192328878062835108560158704860332970469931353
        );                                      
        
        vk.IC[63] = Pairing.G1Point( 
            5582727988509580823011815201257533060214526637102619192880309574369639276820,
            10385922227377732336030569154109144523548302282307400585929448164307291999370
        );                                      
        
        vk.IC[64] = Pairing.G1Point( 
            20620968280505934578179146931911137813982302731220139790886303300744619230146,
            11685531041819262333716239191458673539509542533258666063846987774023344849776
        );                                      
        
        vk.IC[65] = Pairing.G1Point( 
            11027254890522723817143229770991220138524194524631349742295712709759753681733,
            21176615801276573330196946995312449582251751533878309871038408495204730656655
        );                                      
        
        vk.IC[66] = Pairing.G1Point( 
            351157954171710203130723630553067012286828238211196753930512107708210242538,
            9878071729596473152730472843814479178962171895737985625241411001188466982293
        );                                      
        
        vk.IC[67] = Pairing.G1Point( 
            1473574052802375628460866099178516532418928978115036892740897823737636127183,
            1941227532768322115456061534179402551249829587555035151527506562388540720218
        );                                      
        
        vk.IC[68] = Pairing.G1Point( 
            17296433046174954386002929897104145087862708520650032078167886719945910791800,
            7713957186084914513827681313024378900356593746134395985618885125706476243047
        );                                      
        
        vk.IC[69] = Pairing.G1Point( 
            3792761617983386614753435024822521811215842059074014955971316668930266784036,
            6087135022443312590818040532141227244711568219307940848708503872810316366012
        );                                      
        
        vk.IC[70] = Pairing.G1Point( 
            8659735118122913638380865363598019241556816593929731283316637552161935556402,
            20909260213357979813367023544029470251251253516256278050747857709355935704196
        );                                      
        
        vk.IC[71] = Pairing.G1Point( 
            5362584260815674685355714649327036118659824152097164841157401238807330269802,
            3432134029882249639330411946549849552068736049274528727959802021130885793167
        );                                      
        
        vk.IC[72] = Pairing.G1Point( 
            9665929176822076893330299536459024866825081362181368349714479645124130578658,
            3206902455630412679183476466453556324899679920975102929743002316787880321027
        );                                      
        
        vk.IC[73] = Pairing.G1Point( 
            2841939591687286101664801228256241393971316439475661332116707711366621370085,
            19177756432345813498683915714991572093736746168204967566272164221090371267302
        );                                      
        
        vk.IC[74] = Pairing.G1Point( 
            11091043127576223262470164654934472547142156167668209238300055808960886420923,
            12625049841971216326075069664324621380641537181997791374135928972726543707642
        );                                      
        
        vk.IC[75] = Pairing.G1Point( 
            9794752032397506183911288768328455445303097319467449065975502793918134718378,
            14159797461663226638005672178336629673251524725386128356817540254488534492408
        );                                      
        
        vk.IC[76] = Pairing.G1Point( 
            3188147285553945227761875873049852366561717842244126937384755721417141131423,
            18720676734187995703751655301250064991754131527227207658045983053891521146489
        );                                      
        
        vk.IC[77] = Pairing.G1Point( 
            8452376759413012793544304148398342259785864198492360225589345689052866399352,
            17890475205098758471512960412268194247891865600419044519298992213554213471911
        );                                      
        
        vk.IC[78] = Pairing.G1Point( 
            9938254504708700820559302800986568874191039290704965656402841634161584183490,
            16947189938305231953481487241064039799142967786738489286372519451260074725473
        );                                      
        
        vk.IC[79] = Pairing.G1Point( 
            12921149899114123208216582210052286881188740620978048189070078564448382836634,
            6616210583785379221983349646843758991245828145931845603168921259232847500668
        );                                      
        
        vk.IC[80] = Pairing.G1Point( 
            906885530132749947950306327902364890458101722169941940515908122087329355991,
            511573377341918834373354930317445190688192731741549459734608877253197669344
        );                                      
        
        vk.IC[81] = Pairing.G1Point( 
            4211488791572236806911340004709367120086858937042641392199183314829937260706,
            18144377468514708045087830158990828601730379746320450914518358249006229661113
        );                                      
        
        vk.IC[82] = Pairing.G1Point( 
            16901585467797764336317080682288398161720864636356895208927570479890314208065,
            17882821527549427587189301911049522125651287913300834310712822170778018438366
        );                                      
        
        vk.IC[83] = Pairing.G1Point( 
            15562631650418616666560468348325417458642675584176247462581406801843738680879,
            1001579101441311297696630814159527792163983006834133786950072049060575992922
        );                                      
        
        vk.IC[84] = Pairing.G1Point( 
            20805451558644199449864150673931717665034022398375636116600103424819166416094,
            16249719841081815236664918633145535797041926859559105682911506185000589161764
        );                                      
        
        vk.IC[85] = Pairing.G1Point( 
            6274061550567562455719629377190151793970811218169802835154909988583127579707,
            1541261118838650858556992481575315507515922072880585438984211375155979194675
        );                                      
        
        vk.IC[86] = Pairing.G1Point( 
            12626903925493767803980492371537902533749184548498014814781649698803799109239,
            3369017246143186846353768123014665385645471263074750953474671912244867386564
        );                                      
        
        vk.IC[87] = Pairing.G1Point( 
            3115208804855898126288044917856099541551062784549165939971952126676299083491,
            3086919662837145498522051171415415595060180641722717339107254886368769928975
        );                                      
        
        vk.IC[88] = Pairing.G1Point( 
            128031211406932650844232114521489236382923044777878423693810248400627243463,
            15314760920434438922617775254126220739733188812084349141466471646446864742262
        );                                      
        
        vk.IC[89] = Pairing.G1Point( 
            19269773159005603316142356675298261875983749964724917087254933762736984420055,
            16735958695303808860272607513071246327323542394294851367057587921073190052559
        );                                      
        
        vk.IC[90] = Pairing.G1Point( 
            17381976488961187523797544784535159894959074439726725079015585118016730869064,
            16311339281857612381766258725258850366538082815002123779711441711019497711731
        );                                      
        
        vk.IC[91] = Pairing.G1Point( 
            366532254256783057962093617693366334413275936923684013761574130178794947112,
            9703247118522493272607655880746134434063801545284740292480937350004791162070
        );                                      
        
        vk.IC[92] = Pairing.G1Point( 
            7050722443566660337635562601156490779272249211967272690460775719949746616393,
            11434983805409383666384772159076162217621329441702128850152051507468880843114
        );                                      
        
        vk.IC[93] = Pairing.G1Point( 
            20692279658243829927682851339230510670139074427327311843689711134383132624310,
            12669489081650535882393503815132884488115603442110177513792341898075680051467
        );                                      
        
        vk.IC[94] = Pairing.G1Point( 
            1939192347348244455916880934814265147868027848935829189458137143284884519426,
            7725138586800167157348399737463068729533754454754827583538423653483847517906
        );                                      
        
        vk.IC[95] = Pairing.G1Point( 
            15680650240921649280540140677577662141377335640317654134382488510029554813837,
            10116370543180395581462475557623018666357714045664713051704471579052343805903
        );                                      
        
        vk.IC[96] = Pairing.G1Point( 
            415283963950950763104465541795897963151840860911543955916242344674778523448,
            1733155429355278581547734453455066969915555353593846203621743306814602213440
        );                                      
        
        vk.IC[97] = Pairing.G1Point( 
            3246235391744834827216671162109199774997912363443653260373047561014639224537,
            3969918388728216719027466480398210190364284389500510701046393087068357636011
        );                                      
        
        vk.IC[98] = Pairing.G1Point( 
            1141547323393736928984224298252094588672893965516106311742083449633522252181,
            8879547479092131814227173213778498463697261283188500289902164824123649428012
        );                                      
        
        vk.IC[99] = Pairing.G1Point( 
            11138070558393929814841820324892255330018274809921698000195764771616941777460,
            481450849780199599163047337072987638500907523190583571202705936606966886759
        );                                      
        
        vk.IC[100] = Pairing.G1Point( 
            19228790213250760960280708682999770271152256590528934179602706442416178257236,
            17795167410596155546365672303308460165130409390557991002455862432201185901050
        );                                      
        
        vk.IC[101] = Pairing.G1Point( 
            12999559148820393083517599708563473390436114629276299435396809678152658735405,
            12300387786786951739210937240155253063668492677863017883592505006820631787163
        );                                      
        
        vk.IC[102] = Pairing.G1Point( 
            111849417520725630063781678158185436774785135878752781700737196910380067101,
            19645630680565951341220508743961092006370558087598076521560026745887519481888
        );                                      
        
    }
    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length,"verifier-bad-input");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field,"verifier-gte-snark-scalar-field");
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd4(
            Pairing.negate(proof.A), proof.B,
            vk.alfa1, vk.beta2,
            vk_x, vk.gamma2,
            proof.C, vk.delta2
        )) return 1;
        return 0;
    }
    /// @return r  bool true if proof is valid
    function verifyProof(
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint[102] memory input
        ) public view returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}
